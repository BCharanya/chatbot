pip install wikipedia googletrans==4.0.0-rc1 transformers torch nltk speechrecognition pyttsx3

import wikipedia
import wikipediaapi
import nltk
import speech_recognition as sr
import pyttsx3
import tkinter as tk
from tkinter import scrolledtext
from googletrans import Translator
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Initialize Translator, Speech, and Wikipedia API
translator = Translator()
wiki_wiki = wikipediaapi.Wikipedia('en')
engine = pyttsx3.init()

# Load T5 model once for faster performance
tokenizer = AutoTokenizer.from_pretrained('t5-base')
model = AutoModelForSeq2SeqLM.from_pretrained('t5-base')

# Speech recognition
recognizer = sr.Recognizer()

def text_to_speech(text):
    """ Converts text to speech """
    engine.say(text)
    engine.runAndWait()

def speech_to_text():
    """ Converts speech to text """
    with sr.Microphone() as source:
        output_field.delete("1.0", tk.END)
        output_field.insert(tk.END, "Listening...")
        root.update()
        try:
            audio = recognizer.listen(source)
            user_input = recognizer.recognize_google(audio)
            input_field.delete("1.0", tk.END)
            input_field.insert(tk.END, user_input)
            get_wikipedia_data()  # Automatically fetch data
        except sr.UnknownValueError:
            output_field.delete("1.0", tk.END)
            output_field.insert(tk.END, "Sorry, I could not understand.")
        except sr.RequestError:
            output_field.delete("1.0", tk.END)
            output_field.insert(tk.END, "Could not request results. Check internet.")

def get_wikipedia_data():
    """ Fetches and summarizes Wikipedia data """
    user_input = input_field.get("1.0", "end-1c").strip()

    if not user_input:
        output_field.delete("1.0", tk.END)
        output_field.insert(tk.END, "Please enter a question.")
        return

    # Translate to English if needed
    translated_input = translator.translate(user_input, dest='en').text

    # Tokenize and filter stopwords
    tokens = word_tokenize(translated_input)
    filtered_tokens = [word for word in tokens if word.lower() not in stopwords.words('english')]
    query = ' '.join(filtered_tokens).lower()
    query = ''.join(letter for letter in query if letter.isalnum() or letter == ' ')

    # Search Wikipedia for best match
    search_results = wikipedia.search(query)
    if not search_results:
        output_field.delete("1.0", tk.END)
        output_field.insert(tk.END, "No results found. Please try again.")
        return

    # Fetch summary
    page_title = search_results[0]
    try:
        summary = wikipedia.summary(page_title, sentences=5)
    except wikipedia.exceptions.DisambiguationError as e:
        summary = f"Multiple results found: {', '.join(e.options[:5])}"
    except wikipedia.exceptions.PageError:
        output_field.delete("1.0", tk.END)
        output_field.insert(tk.END, "No results found. Please try again.")
        return

    # Summarize using T5 model
    inputs = tokenizer.encode("summarize: " + summary, return_tensors="pt", max_length=512, truncation=True)
    summary_ids = model.generate(inputs, max_length=100, min_length=50, length_penalty=2.0, num_beams=4)
    short_summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

    # Display output
    output_field.delete("1.0", tk.END)
    output_field.insert(tk.END, short_summary)

    # Convert output to speech
    text_to_speech(short_summary)

# GUI Setup
root = tk.Tk()
root.title("Multilingual Chatbot with Wikipedia & Speech Support")

# Input Box
input_label = tk.Label(root, text="Enter your question or use voice input:")
input_label.pack()
input_field = scrolledtext.ScrolledText(root, height=2, wrap=tk.WORD)
input_field.pack()

# Buttons
get_answer_btn = tk.Button(root, text="Get Answer", command=get_wikipedia_data)
get_answer_btn.pack()
voice_input_btn = tk.Button(root, text="Voice Input", command=speech_to_text)
voice_input_btn.pack()

# Output Box
output_label = tk.Label(root, text="Answer:")
output_label.pack()
output_field = scrolledtext.ScrolledText(root, height=5, wrap=tk.WORD)
output_field.pack()

# Run the GUI
root.mainloop()
